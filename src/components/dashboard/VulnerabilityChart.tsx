
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from 'recharts';

// Sample data - in a real app, this would come from your API
const vulnerabilityData = [
  { name: 'Web', critical: 4, high: 7, medium: 12, low: 5 },
  { name: 'Network', critical: 2, high: 5, medium: 8, low: 10 },
  { name: 'LDAP/AD', critical: 1, high: 3, medium: 5, low: 8 },
  { name: 'Database', critical: 3, high: 4, medium: 6, low: 9 },
  { name: 'SSH/FTP', critical: 0, high: 2, medium: 4, low: 6 },
];

const severityData = [
  { name: 'Critical', value: 10, color: '#ef4444' },
  { name: 'High', value: 21, color: '#f97316' },
  { name: 'Medium', value: 35, color: '#facc15' },
  { name: 'Low', value: 38, color: '#84cc16' },
];

const categoryData = [
  { name: 'Injection', value: 24, color: '#4f46e5' },
  { name: 'Authentication', value: 18, color: '#0ea5e9' },
  { name: 'Misconfiguration', value: 29, color: '#6366f1' },
  { name: 'Exposure', value: 16, color: '#8b5cf6' },
  { name: 'Other', value: 17, color: '#a855f7' },
];

const RADIAN = Math.PI / 180;
const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);

  return (
    <text x={x} y={y} fill="white" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline="central">
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  );
};

const tooltipStyle = {
  backgroundColor: "rgba(255, 255, 255, 0.9)",
  border: "1px solid rgba(0, 0, 0, 0.05)",
  borderRadius: "8px",
  padding: "8px 12px",
  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
  fontSize: "12px",
};

const VulnerabilityChart = () => {
  const [view, setView] = useState('bar');

  return (
    <Card className="h-full">
      <CardHeader className="pb-3">
        <CardTitle className="text-base font-medium">Vulnerability Analysis</CardTitle>
        <CardDescription className="text-xs">
          Distribution of vulnerabilities by type and severity
        </CardDescription>

        <Tabs defaultValue="bar" value={view} onValueChange={setView} className="mt-2">
          <TabsList className="w-full">
            <TabsTrigger value="bar" className="flex-1">By Category</TabsTrigger>
            <TabsTrigger value="severity" className="flex-1">By Severity</TabsTrigger>
            <TabsTrigger value="type" className="flex-1">By Type</TabsTrigger>
          </TabsList>
        </Tabs>
      </CardHeader>
      <CardContent className="p-1 pb-4">
        <div className="h-[300px] w-full">
          <TabsContent value="bar" className="h-full mt-0">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={vulnerabilityData} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" stroke="rgba(0,0,0,0.05)" />
                <XAxis dataKey="name" tick={{ fontSize: 12 }} />
                <YAxis tick={{ fontSize: 12 }} />
                <Tooltip 
                  contentStyle={tooltipStyle}
                  formatter={(value: any) => [`${value}`, '']}
                />
                <Bar dataKey="critical" stackId="a" fill="#ef4444" name="Critical" />
                <Bar dataKey="high" stackId="a" fill="#f97316" name="High" />
                <Bar dataKey="medium" stackId="a" fill="#facc15" name="Medium" />
                <Bar dataKey="low" stackId="a" fill="#84cc16" name="Low" />
              </BarChart>
            </ResponsiveContainer>
          </TabsContent>
          
          <TabsContent value="severity" className="h-full mt-0">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={severityData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={renderCustomizedLabel}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {severityData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Legend layout="horizontal" verticalAlign="bottom" align="center" />
                <Tooltip contentStyle={tooltipStyle} />
              </PieChart>
            </ResponsiveContainer>
          </TabsContent>
          
          <TabsContent value="type" className="h-full mt-0">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={categoryData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={renderCustomizedLabel}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {categoryData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Legend layout="horizontal" verticalAlign="bottom" align="center" />
                <Tooltip contentStyle={tooltipStyle} />
              </PieChart>
            </ResponsiveContainer>
          </TabsContent>
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityChart;
